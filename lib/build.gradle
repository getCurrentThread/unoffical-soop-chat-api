/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'com.diffplug.spotless' version '6.23.3' // Spotless 플러그인 (코드 포맷팅)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit
    testImplementation 'org.mockito:mockito-core:3.12.4'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    implementation 'com.google.code.gson:gson:2.10.1'
}

spotless {
    java {
        // Google Java format.
        googleJavaFormat().aosp()
        // import ordering
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        // remove unused imports
        removeUnusedImports()
        // trim trailing whitespace
        trimTrailingWhitespace()
        // end with newline
        endWithNewline()
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    dependsOn 'spotlessApply'
}
test {
    // 테스트 로그를 표준 출력으로 리다이렉트
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    // 모든 테스트의 출력을 항상 표시
    afterTest { desc, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            println "Failing test: ${desc.name}"
            println "Test result: ${result.resultType}"
            println "Test exception: ${result.exception}"
        }
    }
}